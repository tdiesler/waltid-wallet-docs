@startuml
'https://plantuml.com/sequence-diagram

skinparam classFontColor 007BFF
skinparam classFontSize 12
skinparam classFontName Aapex
skinparam backgroundColor white
skinparam minClassWidth 155
skinparam nodesep 34
skinparam ranksep 70

skinparam sequence {
ArrowColor 007BFF
ActorBorderColor 007BFF
LifeLineBorderColor 007BFF
LifeLineBackgroundColor 007BFF

ParticipantBorderColor 007BFF
ParticipantBackgroundColor 007BFF
ParticipantFontName Impact
ParticipantFontSize 17
ParticipantFontColor #A9DCDF

'ActorBackgroundColor aqua
ActorFontColor 007BFF
ActorFontSize 17
ActorFontName Aapex
}

skinparam class {
BorderColor 007BFF
ArrowColor 007BFF
BackgroundColor white
}

skinparam interface {
BorderColor 007BFF
ArrowColor 007BFF
}

skinparam note {
BorderColor 007BFF
BackgroundColor 7ACFF5
}


autonumber
'https://ec.europa.eu/cefdigital/wiki/display/BLOCKCHAININT/2.+VC+exchange+over+API
header OIDC credential issuance flow
title
OIDC credential issuance flow (BETA)
end title
autonumber
actor "Natural Person" as NP
participant Browser
participant "User Web Wallet\n(Wallet Backend)" as WW
participant "Issuing Party \n(Issuer Backend)" as IP

NP->Browser: User clicks "Add credential" in wallet
Browser->WW: List known OIDC issuers
WW-->Browser: List of OIDC issuers
NP->Browser: Select issuer
Browser->WW: Get list of issuable credentials
WW->IP: Get OIDC discovery document
IP-->WW: OIDC discovery document
WW->WW: Parse issuable credentials
WW-->Browser: List of issuable credentials
NP->Browser: Selects credentials to issue
opt VP Requirements
Browser->WW: List credentials requested by issuer
WW-->Browser: required credentials
NP->Browser: Select credentials to be presented
end

NP->Browser: Clicks "Fetch credential from issuer"
Browser->WW:

opt VP Requirements
WW->IP: Get nonce for VP
IP-->WW: Nonce
WW->WW: Create VP required by issuer
end

WW->IP: Push OIDC authorization request\nwith redirect_uri and opt. VPs
IP-->WW: authorization request URI
WW->Browser: Redirect to IP authorization page
NP->Browser: Interact with Issuer Portal\nauthorize, select credentials, confirm
Browser->IP:
IP->IP: Generate authorization code
IP->Browser: Redirect to wallet API with authorization code
Browser->WW: 
WW->IP: Resolve access_token using auth. code
IP-->WW: access_token
loop for each credential type
WW->IP: Fetch credential using access_token
IP-->WW: Credential 
end
WW->WW: Store issued credentials
WW->Browser: Redirect to wallet UI\nfor receiving credentials
Browser->WW: List issued credentials
WW-->Browser: issued credentials
NP->Browser: Review/Confirm issued credentials

@enduml
